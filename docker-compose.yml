services:

  #
  # The API gateway that exposes backend components at domain based URLs
  #
  api-gateway:
    image: kong-api-gateway:1.0
    ports:
      - 80:3001
    volumes:
      - ./apigateway/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: '/usr/local/kong/declarative/kong.yml'
      KONG_PROXY_LISTEN: '0.0.0.0:3001'
      KONG_LOG_LEVEL: 'info'
      KONG_PLUGINS: 'bundled,phantom-token'
      KONG_NGINX_HTTP_LUA_SHARED_DICT: 'phantom-token 10m'

  #
  # The MCP server implements a streamable HTTP transport for MCP clients.
  # The MCP server uses an access token audience different to that of APIs.
  # To call APIs the MCP server uses token exchange to update the access token audience.
  #
  utility-mcp-server:
    image: utility-mcp-server:1.0
    hostname: utility-mcp-server
    environment:
      PORT: '3000'
      EXTERNAL_BASE_URL: 'http://mcp.demo.example'
      AUTHORIZATION_SERVER_BASE_URL: 'http://login.demo.example'
      STOCKS_API_BASE_URL: 'http://stocks-api:3000/'
      JWKS_URI: 'http://idsvr:8443/oauth/v2/oauth-anonymous/jwks'
      REQUIRED_JWT_ALGORITHM: 'PS256'
      REQUIRED_JWT_ISSUER: 'http://login.demo.example/oauth/v2/oauth-anonymous'
      REQUIRED_JWT_AUDIENCE: 'http://mcp.demo.example/'
      TOKEN_EXCHANGE_CLIENT_ID: 'mcp-server'
      TOKEN_EXCHANGE_CLIENT_SECRET: 'Password1'
      TOKEN_ENDPOINT: 'http://idsvr:8443/oauth/v2/oauth-token'

  #
  # The stocks API that uses OAuth to secure access to financial data
  #
  stocks-api:
    image: stocks-api:1.0
    hostname: stocks-api
    environment:
      PORT: '3000'
      JWKS_URI: 'http://idsvr:8443/oauth/v2/oauth-anonymous/jwks'
      REQUIRED_JWT_ALGORITHM: 'PS256'
      REQUIRED_JWT_ISSUER: 'http://login.demo.example/oauth/v2/oauth-anonymous'
      REQUIRED_JWT_AUDIENCE: 'http://api.demo.example'
  
  #
  # The Curity Identity Server implements security standards and issues access tokens to MCP clients used by AI agents
  #
  authorization-server:
    image: curity.azurecr.io/curity/idsvr:latest
    hostname: idsvr
    volumes:
      - ./idsvr/curity-config.xml:/opt/idsvr/etc/init/curity-config.xml
      - ./idsvr/token-procedures/set-access-token-audience.js:/opt/idsvr/etc/init/token-procedures/oauth-token-authorization-code/set-access-token-audience.js
      - ./idsvr/token-procedures/set-token-exchange-audience.js:/opt/idsvr/etc/init/token-procedures/oauth-token-oauth-token-exchange/set-token-exchange-audience.js
      - ./idsvr/pre-processing-procedures/mcp-client-registration-policy.js:/opt/idsvr/etc/init/pre-processing-procedures/mcp-client-registration-policy.js
    environment:
      ADMIN: 'true'
      LICENSE_KEY: "${LICENSE_KEY}"
      LOGGING_LEVEL: 'INFO'

  #
  # The SQL database used by the Curity Identity Server
  # This contains administrator approved users and dynamically registered clients
  #
  authorization-server-data:
    image: postgres:latest
    hostname: dbserver
    volumes:
      - ./idsvr/data-backup.sql:/docker-entrypoint-initdb.d/data-backup.sql
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'Password1'
      POSTGRES_DB: 'idsvr'

  #
  # An email server with a test inbox to allow email authentication for test users
  #
  mail-server:
    image: maildev/maildev:latest
    hostname: smtpserver
    environment:
      MAILDEV_INCOMING_USER: 'noreply@maildev'
      MAILDEV_INCOMING_PASSWORD: 'Password1'
